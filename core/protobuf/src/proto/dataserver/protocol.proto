syntax = "proto2";

package alluxio.proto.dataserver;

import "status.proto";

// The read request.
// next available id: 9
message ReadRequest {
  optional int64 block_id = 2;
  optional int64 offset = 3;
  optional int64 length = 4;
  // If set, this request is to cancel the reading request for the id.
  optional bool cancel = 5;

  // If set, the server should send packets in the specified packet size.
  optional int64 packet_size = 9;

  // This is only set for UFS block read.
  optional OpenUfsBlockOptions open_ufs_block_options = 10;
}

message OpenUfsBlockOptions {
  optional string ufsPath = 1;
  // The offset of the block in within the file.
  optional int64 offset_in_file = 2;
  // The block size.
  optional int64 block_size = 3;
  optional int32 maxUfsReadConcurrency = 4;
  optional int64 mountId = 5;
  // If set, do not try to cache the block locally when reading the data from the UFS.
  optional bool no_cache = 6;
}

// The write request.
// next available id: 13
message WriteRequest {
  optional int64 block_id = 2;
  optional int64 offset = 3;

  // This is only applicable for block write.
  optional int32 tier = 5;

  optional bool eof = 6;
  optional bool cancel = 7;

  // The following are only applicable for ufs writes.
  optional string ufs_path = 8;
  optional string owner = 9;
  optional string group = 10;
  optional int32 mode = 11;
  optional int64 mount_id = 12;
}

// The response.
// next available id: 3
message Response {
  optional status.PStatus status = 1;
  optional string message = 2;
}

// A heartbeat
message Heartbeat {
  // Empty message
}

// Netty RPCs. Every RPC needs to define a request type and optionally a response type (default to Response).

// next available id: 3
message LocalBlockOpenRequest {
  optional int64 block_id = 1;
  optional int64 session_id = 2;
}

// next available id: 2
message LocalBlockOpenResponse {
  optional string path = 1;
}

// next available id: 3
message LocalBlockCloseRequest {
  optional int64 block_id = 1;
  optional int64 session_id = 2;
}

// next available id: 6
message LocalBlockCreateRequest {
  optional int64 block_id = 1;
  optional int64 session_id = 2;
  optional int32 tier = 3;
  optional int64 space_to_reserve = 4;
  // If set, only reserve space for the block.
  optional bool only_reserve_space = 5;
}

// next available id: 2
message LocalBlockCreateResponse {
  optional string path = 1;
}

// next available id: 4
message LocalBlockCompleteRequest {
  optional int64 block_id = 1;
  optional int64 session_id = 2;
  optional bool cancel = 3;
}
